#include "ThingSpeak.h"
#include <WiFiNINA.h>
#include "secrets.h"
#include "BMA400.h"

char ssid[] = SECRET_SSID;    //  your network SSID (name) 
char pass[] = SECRET_PASS;   // your network password
int keyIndex = 0;            // your network key Index number (needed only for WEP)
WiFiClient  client;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

int sensorPin = A2; // select the input pin for tempsens
const int R0 = 100000;
const int B = 4275;

int LjusSensor = A1; // select the input pin for the ljussensor
int Ljus = 0; // variable to store the value coming from the sensor
int AccSensor = 1; 
int starttid;
float Acc; 
int A = 0;
float X = 0, Y = 0, Z = 0;
int i = -1;
float listaX[] = {0,0,0,0,0,0,0,0,0,0};
float listaY[] = {0,0,0,0,0,0,0,0,0,0};
float listaZ[] = {0,0,0,0,0,0,0,0,0,0};
bool tjuv = false; 
bool tjuv1 = false; 

void setup() {
  
  Serial.begin(115200);  // Initialize serial
  pinMode(0, OUTPUT);
  Wire.begin();
  while (!Serial);
  Serial.println("BMA400 Raw Data");

  while (1) {
      if (bma400.isConnection()) {
          bma400.initialize();
          Serial.println("BMA400 is connected");
          break;
      } else {
          Serial.println("BMA400 is not connected");
      }

      delay(50);
  }

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv != "1.0.0") {
    Serial.println("Please upgrade the firmware");
  }
    
  ThingSpeak.begin(client);{  //Initialize ThingSpeak
  starttid = millis();
   
 }
}

void loop() {

  bma400.getAcceleration(&X, &Y, &Z);

  int a = analogRead(sensorPin);
  float R = 1023.0/a-1.0;
  R = R0*R;
  float temperature = 1.0/(log(R/R0)/B+1/298.15)-273.15; // convert to temperature via datasheet
  
  // Write to ThingSpeak. There are up to 8 fields in a channel, allowing you to store up to 8 different
  // pieces of information in a channel.  Here, we write to field 1.
  int y = analogRead(LjusSensor);

  float Acc = digitalRead(AccSensor);

  // read the value from the sensor:
  Ljus = analogRead(LjusSensor);
  // stop the program for for <sensorValue> milliseconds:
  i += 1;
  if (i == 10){
    i = 0;
    }

  listaX[i] = X; 
  listaY[i] = Y;
  listaZ[i] = Z;

  float sumX = 0; 
  float sumY = 0;
  
  for (int k = 0; k < 10; k++) {
    sumX += listaX[k];
    Serial.print(listaX[k]);
    Serial.print(" ");
    }
  
  for (int j = 0; j < 10; j++) {
    sumY += listaY[j];
    Serial.print(listaY[j]);
    Serial.print(" ");
    
    }
   Serial.println(sumX/10);
  
   if (abs(sumX/10) > 500) {
    tjuv = true; 
    digitalWrite(0, HIGH);
     
    }
   
   if (abs(sumY/10) > 500) {
    tjuv1 = true;
    digitalWrite(0, HIGH);
    }

//om lista aviker från mddelvärdet, skicka 1, om inte 0

 if  (millis() >= 15000 + starttid) {
  // Connect or reconnect to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass); // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }                                                           //skickar all data till Thingspeak
    int x = ThingSpeak.setField(1 ,temperature);
    int z = ThingSpeak.setField(2 ,y);
    int A = ThingSpeak.setField(3 ,tjuv);// skicka 1 eller 0 om det har acce...
    int T = ThingSpeak.setField(4 , tjuv1);
    tjuv = false; 
    tjuv1 = false;
    int  S = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
    starttid = millis();

  } 

 delay(50);
 }

 
